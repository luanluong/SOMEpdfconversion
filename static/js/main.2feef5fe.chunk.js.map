{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PDFJS","window","workerSrc","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","BASE64_MARKER","KEYS_WORD","label","value","App","useState","dataExport","setDataExport","isValidData","index","arrayString","length","str","trim","moment","isValid","convertDataURIToBinary","dataURI","pdfAsArray","base64Index","indexOf","base64","substring","raw","atob","rawLength","array","Uint8Array","ArrayBuffer","i","charCodeAt","getDocument","then","pdf","pdfDocument","pagesPromises","pdfInfo","numPages","pageNumber","pageNum","PDFDocumentInstance","push","Promise","resolve","getPage","pdfPage","getTextContent","textContent","items","map","all","pagesText","indexOfKeys","iKey","findIndex","t","startsWith","result","accountNumber","yourServiceAddress","billIssueDate","totalAmountDue","Container","maxWidth","Grid","container","spacing","direction","alignItems","justifyContent","style","minHeight","item","width","dropzoneText","filesLimit","getPreviewIcon","fileObject","classes","type","file","iconProps","className","image","PictureAsPdf","AttachFile","showAlerts","acceptedFiles","previewGridClasses","onChange","files","fReader","FileReader","readAsDataURL","onloadend","event","target","filename","toISOString","element","Box","align","Button","variant","color","data","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2feef5fe.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { DropzoneArea } from \"material-ui-dropzone\";\nimport { Button, Container, Grid, Box } from \"@material-ui/core\";\nimport { AttachFile, PictureAsPdf } from \"@material-ui/icons\";\nimport moment from \"moment\";\nimport ReactExport from \"react-export-excel\";\n\nimport \"./App.css\";\n\nconst PDFJS = window.PDFJS;\nPDFJS.workerSrc = \"\";\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nconst BASE64_MARKER = \";base64,\";\nconst KEYS_WORD = [\n  {\n    label: \"Account number:\",\n    value: \"accountNumber\",\n  },\n  {\n    label: \"Your service address:\",\n    value: \"yourServiceAddress\",\n  },\n  {\n    label: \"Bill Issue date:\",\n    value: \"billIssueDate\",\n  },\n  {\n    label: \"Total amount due by\",\n    value: \"totalAmountDue\",\n  },\n];\n\nconst App = () => {\n  const [dataExport, setDataExport] = useState();\n\n  const getPageText = (pageNum, PDFDocumentInstance) => {\n    return new Promise((resolve) => {\n      PDFDocumentInstance.getPage(pageNum).then((pdfPage) => {\n        pdfPage.getTextContent().then((textContent) => {\n          resolve(textContent.items.map(({ str }) => str));\n        });\n      });\n    });\n  };\n\n  const isValidData = (index, arrayString, value) => {\n    if (index >= arrayString.length - 1) return \"\";\n    const str = arrayString[index].trim();\n\n    if (!str || (value === \"totalAmountDue\" && moment(str).isValid())) {\n      return isValidData(index + 1, arrayString, value);\n    } else {\n      return str;\n    }\n  };\n\n  const pdfAsArray = (pdfAsArray) => {\n    PDFJS.getDocument(pdfAsArray).then(\n      (pdf) => {\n        const pdfDocument = pdf;\n        const pagesPromises = [];\n\n        for (let i = 0; i < pdf.pdfInfo.numPages; i++) {\n          ((pageNumber) => {\n            pagesPromises.push(getPageText(pageNumber, pdfDocument));\n          })(i + 1);\n        }\n\n        Promise.all(pagesPromises).then((pagesText) => {\n          let indexOfKeys = [];\n          for (let pageNum = 0; pageNum < pagesText.length; pageNum++) {\n            const arrayString = pagesText[pageNum];\n\n            for (let iKey = 0; iKey < KEYS_WORD.length; iKey++) {\n              const { label } = KEYS_WORD[iKey];\n              const index = arrayString.findIndex((t) => t.startsWith(label));\n              if (index !== -1) {\n                indexOfKeys.push(index);\n              }\n            }\n\n            if (indexOfKeys.length === KEYS_WORD.length) {\n              let result = {\n                accountNumber: \"\",\n                yourServiceAddress: \"\",\n                billIssueDate: \"\",\n                totalAmountDue: \"\",\n              };\n              for (let iKey = 0; iKey < KEYS_WORD.length; iKey++) {\n                const { value } = KEYS_WORD[iKey];\n                const index = indexOfKeys[iKey] + 1;\n                const str = isValidData(index, arrayString, value);\n                result[value] = str;\n              }\n              setDataExport(result);\n            } else {\n              indexOfKeys = [];\n            }\n          }\n        });\n      },\n      () => {}\n    );\n  };\n\n  const convertDataURIToBinary = (dataURI) => {\n    const base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;\n    const base64 = dataURI.substring(base64Index);\n    const raw = window.atob(base64);\n    const rawLength = raw.length;\n    let array = new Uint8Array(new ArrayBuffer(rawLength));\n\n    for (let i = 0; i < rawLength; i++) {\n      array[i] = raw.charCodeAt(i);\n    }\n    pdfAsArray(array);\n  };\n\n  const onExtractText = (files) => {\n    if (files.length > 0) {\n      let fReader = new FileReader();\n      fReader.readAsDataURL(files[0]);\n      fReader.onloadend = function (event) {\n        convertDataURIToBinary(event.target.result);\n      };\n    }\n  };\n\n  const handlePreviewIcon = (fileObject, classes) => {\n    const { type } = fileObject.file;\n    const iconProps = {\n      className: classes.image,\n    };\n\n    switch (type) {\n      case \"application/pdf\":\n        return <PictureAsPdf {...iconProps} />;\n      default:\n        return <AttachFile {...iconProps} />;\n    }\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Grid\n        container\n        spacing={3}\n        direction=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        style={{ minHeight: \"100vh\" }}\n      >\n        <Grid item style={{ width: \"100%\" }}>\n          <DropzoneArea\n            dropzoneText=\"Drag and drop a file or click to upload\"\n            filesLimit={1}\n            getPreviewIcon={handlePreviewIcon}\n            showAlerts={false}\n            acceptedFiles={[\"application/pdf\"]}\n            previewGridClasses={{ container: \"justify-content-center\", item: \"m-4\" }}\n            onChange={onExtractText}\n          />\n        </Grid>\n        <Grid item style={{ width: \"100%\" }}>\n          <ExcelFile\n            filename={moment().toISOString()}\n            element={\n              <Box align=\"center\">\n                {dataExport && (\n                  <Button variant=\"contained\" color=\"primary\">\n                    Download Excel\n                  </Button>\n                )}\n              </Box>\n            }\n          >\n            <ExcelSheet data={[dataExport]} name=\"Employees\">\n              <ExcelColumn label=\"Account Number\" value=\"accountNumber\" />\n              <ExcelColumn label=\"Your Service Address\" value=\"yourServiceAddress\" />\n              <ExcelColumn label=\"Bill Issue Date\" value=\"billIssueDate\" />\n              <ExcelColumn label=\"Total Amount Due\" value=\"totalAmountDue\" />\n            </ExcelSheet>\n          </ExcelFile>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}